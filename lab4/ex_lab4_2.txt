
<!--https://gist.githubusercontent.com/rasheed20/2e3f2bf9aa7e31b76614f88abceeddb3/raw/india_topo.json-->
<html>

<body>
  <style>
    body {
      background-color: #1B1F2A;width: 100%;
      font-family: 'Roboto', sans-serif;
      height: fit-content;
    }

    .hover {
      fill: yellow !important;
    }

    .path {
      stroke: white;
      stroke-width: 0.25px;
      fill: #87CEEB;
      fill-opacity: 0.4;
    }

    .widget {
      margin: 0 auto; width: fit-content;
      height: fit-content; border-radius: 5px;
      background-color: #222D3A; 
      box-shadow: 0px 0px 1px 0px #06060d;margin-top: 50px;
    }

    .header {
      background-color: #29384D; height: 40px;
      color: #929DAF;text-align: center;
      font-weight: 400;line-height: 40px;
      border-top-left-radius: 7px;
      border-top-right-radius: 7px;
      font-size: 1.5em;
      text-shadow: 1px 1px #06060d;
    }

    .chart-container {
      padding: 10px;
    }

    .shadow {
      -webkit-filter: drop-shadow(0px 3px 3px rgba(0, 0, 0, .5));
      filter: drop-shadow(0px 3px 3px rgba(0, 0, 0, .5));
    }

    .arc {
      stroke: #000;
      stroke-width: 2px;
      box-shadow: 5px 5px #888888
    }
  </style>

  <script src="https://unpkg.com/topojson@3"></script>
  <script src="https://d3js.org/d3.v7.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/d3-geo-projection@4"></script>

  <button onclick="drawPieChart(data1)">Data 1</button>
  <button onclick="drawPieChart(data2)">Data 2</button>
  <div class="widget">
    <div class="header">Site Visitors</div>
    <div id="canvas2" class="chart-container"></div>
  </div>
  <div class="widget">
    <div class="header">Site Visitors</div>
    <div id="canvas1" class="chart-container"></div>
  </div>
  <div class="widget">
    <div class="header">Site Visitors</div>
    <div id="canvas3" class="chart-container"></div>
  </div>
  <script>

    var width1 = 450, height1 = 450, margin = 40;
    var width2 = 950, height2 = 550;
    var csvData=[]; var currentData =[];
    var radius = Math.min(width1, height1) / 2 - margin

    var svg = d3.select("#canvas1").append("svg")
      .attr("width", width1).attr("height", height1).append("g")
      .attr("transform", "translate(" + width1 / 2 + "," + height1 / 2 + ")");
    var svg2 = d3.select("#canvas2").append("svg")
      .attr("width", width2).attr("height", height2).append("g");
     var svg3 = d3.select("#canvas3").append("svg")
      .attr("width", width2).attr("height", height2).append("g");
    
    var data1 = { a: 9, b: 20, c: 30, d: 8, e: 12 }
    var data2 = { a: 6, b: 16, c: 10, d: 14, e: 1, f: 12 }

    var color = d3.scaleOrdinal().domain(["a", "b", "c", "d", "e", "f"]).range(d3.schemeSet3);
    
    // var dataurl = "https://gist.githubusercontent.com/rahoofhw/23f90643b01aaa07a17e779910cdc405/raw/meteorite-landings.csv";
    var dataurl= "https://gist.githubusercontent.com/rahoofhw/5d91f9f25c9d58db750dfdfe63a5f71c/raw/meteors.csv";
    d3.csv(dataurl).then(function(data){
        csvData = data;
        currentData = csvData;
        console.log(data.length,data[0]);
        drawMap();
        // drawPieChart(data1);
        drawMeteorsPerType(csvData);
        drawMeteorsPercountry(csvData);
    });
    
    function drawMeteorsPerType(Data){
        let key = 'cname';
        var filteredData={} ;
        Data.forEach(a=>{
            if(!filteredData.hasOwnProperty([a[key]])){
             filteredData[a[key]] =0;   
            }
            filteredData[a[key]]= filteredData[a[key]]+1;
        })
        console.log("filteredData ::",filteredData , Object.keys(filteredData).length);
        delete filteredData[""];
        drawPieChart(filteredData)
    }
    
    function drawMeteorsPercountry(Data){
        let key = 'cname';
        var filteredData={} ;
        var bardata =[];
        Data.forEach(a=>{
            if(!filteredData.hasOwnProperty([a[key]])){
             filteredData[a[key]] =0;   
            }
            filteredData[a[key]]= filteredData[a[key]]+1;
        })
        Object.keys(filteredData).forEach(a=>{
            bardata.push({'cname':a,'value':filteredData[a]});
        })
        console.log("bardata ::",filteredData , bardata);
        drawBarChart(bardata)
    }

    function drawPieChart(data) {
      d = Object.values(data);
      var pie = d3.pie();
      var arc = d3.arc().innerRadius(0).outerRadius(radius);
      var data_ready = pie(d)
      var u = svg.selectAll("path").data(data_ready);
      var arcs = u.enter().append('path');

      arcs.merge(u).transition().duration(2000).attr('d', arc).attr("class", "arc")
        .attr('fill', function (d) { return color(d.value) });
    
     
      arcs.on("mouseover", function (d, i) { 
        d3.select(this).attr('d',function(d){return d3.arc().innerRadius(0).outerRadius(radius+10)(d)});
        tooltip.style("visibility", "visible");
      })
    
arcs.on("mousemove", handlemousemove)
    arcs.on("mouseout", handlemouseout);
      // remove the group that is not present anymore
      u.exit().remove()
    }
    
     function drawBarChart( data){
         width3 = svg3.attr("width") - 10,
        height3 = svg3.attr("height") - 10
        
        var g = svg3.append("g")
               .attr("transform", "translate(" + 100 + "," + 100 + ")");
 var xScale = d3.scaleBand().range([0, width3]).padding(0.4),
        yScale = d3.scaleLinear().range([height3, 0]);
        xScale.domain(data.map(function(d) { return d.cname; }));
        yScale.domain([0, d3.max(data, function(d) { return d.value; })]);

        g.append("g")
         .attr("transform", "translate(0," + height3 + ")")
         .call(d3.axisBottom(xScale))
         .append("text")
         .attr("y", height3 - 250)
         .attr("x", width3 - 100)
         .attr("text-anchor", "end")
         .attr("stroke", "black")
         .text("cname");

        g.append("g")
         .call(d3.axisLeft(yScale).tickFormat(function(d){
             return "$" + d;
         })
         .ticks(10))
         .append("text")
         .attr("transform", "rotate(-90)")
         .attr("y", 6)
         .attr("dy", "-5.1em")
         .attr("text-anchor", "end")
         .attr("stroke", "black")
         .text("Stock Price");

        g.selectAll(".bar")
         .data(data)
         .enter().append("rect")
         .attr("class", "bar")
         .attr("x", function(d) { return xScale(d.cname); })
         .attr("y", function(d) { return yScale(d.value); })
         .attr("width", xScale.bandwidth())
         .attr("height", function(d) { return height3 - yScale(d.value); });
    } 
                function handlemousemove(d,i){
                                        d3.selectAll(".text").remove();
     svg.append("text").attr("x", d3.pointer(event)[0] ).attr("y", d3.pointer(event)[1]-5 ).text(i.value).attr("class","text");
            }
            function handlemouseout(){
                d3.select(this).attr('d',function(d){return d3.arc().innerRadius(0).outerRadius(radius)(d)});
                                        d3.selectAll(".text").remove();
            }

    function drawMap() {

      // var projection = d3.geoMercator().center([0, 5 ]).scale(150).rotate([-180,0]);
      var projection = d3.geoCylindricalStereographic();

      var path = d3.geoPath().projection(projection);

      var g = svg2.append("g");

      // load and display the World
      d3.json("https://raw.githubusercontent.com/deldersveld/topojson/master/world-countries.json").then(function (topology) {
        console.log("topology ", topology);
        var topologypath = g.selectAll("path")
          .data(topojson.feature(topology, topology.objects.countries1).features)
          .enter().append("path")
          .attr("d", path).attr("class", 'path')
        //   .on("mouseover", function (d, i) {
        //     console.log( i);
        //     d3.select(this).attr("class", "path hover");
        //     d3.select(this).on("mouseout", function (d) {
        //       d3.select(this).attr("class", "path");
        //     });
        //   })
          .on("click", function (d, i) {
            console.log( i);
            if(i.properties && i.properties.name){
                filterCountryData(i.properties.name);
            }
            d3.select(this).attr("class", "path hover");
          });
      });
    }
    
    function filterCountryData(country){
        currentData =  csvData.filter(x => x.cname == country );
        console.log(" \n\n currentData1 ::: ",currentData);
        drawMeteorsPerType(currentData)
    }

  </script>
</body>

</html>
