<!--https://gist.githubusercontent.com/rasheed20/2e3f2bf9aa7e31b76614f88abceeddb3/raw/india_topo.json-->
<html>
<body>
  <style>
    body {
      background-color: #1B1F2A;width: 100%;
      font-family: 'Roboto', sans-serif;
      height: fit-content;
    }
    .hover { fill: yellow !important; }
    .path {
      stroke: white;  stroke-width: 0.25px;
      fill: #87CEEB;  fill-opacity: 0.4;
    }
    .widget {
      margin: 20px; width: fit-content;
      height: fit-content; border-radius: 5px;
      background-color: #222D3A; 
      box-shadow: 0px 0px 1px 0px #06060d;
      /*margin-top: 50px;*/
    }
    .header {
      background-color: #29384D; height: 40px;
      color: #929DAF;text-align: center;
      font-weight: 400;line-height: 40px;
      border-top-left-radius: 7px;
      border-top-right-radius: 7px;
      font-size: 1.5em;
      text-shadow: 1px 1px #06060d;
    }
    .chart-container { padding: 10px; }
    .shadow { filter: drop-shadow(0px 3px 3px rgba(0, 0, 0, .5)); }
    .arc { stroke: #000; stroke-width: 2px; box-shadow: 10px 10px #000 ;}
    .button {
      background-color: #800020;font-size: 16px;
      border: none;color: white;margin: 7px 30px;
      padding: 5px 10px;text-align: center;
      text-decoration: none;display: inline-block;
      cursor: pointer; float: right;
    }
    .button {
      background-color: #800000;font-size: 16px;
      border: none;color: white;margin: 5px 30px;border-radius: 7px;
      padding: 5px 10px;text-align: center;
      text-decoration: none;display: inline-block;
      cursor: pointer; float: right;
    }
    .text{
        color : red;
    }
    .sphere{
        color: red;
        background-color: white;
    }
  </style>

  <script src="https://unpkg.com/topojson@3"></script>
  <script src="https://d3js.org/d3.v7.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/d3-geo-projection@4"></script>
<script src="https://unpkg.com/d3-v6-tip@1.0.6/build/d3-v6-tip.js"></script>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/gh/bumbeishvili/d3-tip-for-v6@4/d3-tip.min.css">

  <div class="widget">
    <div class="header">Meteor Impact Locations
        <button class="button" onclick="clearFilter('cname')">Clear</button> 
        <button style="background-color: #002240" class="button" onclick="toggleMeteorFlag()">Plot</button> 

    </div>
    <div id="canvas2" class="chart-container"></div>
  </div>
  <div>
    <div class="widget" style=" float: left;">
        <div class="header">Types of meteors
        <button class="button" onclick="clearFilter('recclass')">Clear</button> 
        </div>
        <div id="canvas1" class="chart-container"></div>
    </div>
    <div class="widget" style="margin-left: 520px;position: absolute;">
        <div class="header">Site Visitors</div>
        <div id="canvas3" class="chart-container"></div>
    </div>
  </div>
  
  <script>
    var width1 = 450, height1 = 450, margin = 40;
    var width2 = 1030, height2 = 470 , meteorsflag = false; 
    var width3 = 450, height3 = 450;
    
    
    var csvData=[]; var currentData =[]; var filters ={};
    var radius = Math.min(width1, height1) / 2 - margin
    // var projection = d3.geoNaturalEarth1();
    var projection = d3.geoEqualEarth();
    // var projection = d3.geoCylindricalStereographic();
    // var projection= d3.geoMercator().scale(960/Math.PI/2) .translate([480,480])
    var svg = d3.select("#canvas1").append("svg")
      .attr("width", width1).attr("height", height1).append("g")
      .attr("transform", "translate(" + width1 / 2 + "," + height1 / 2 + ")");
    var svg2 = d3.select("#canvas2").append("svg")
      .attr("width", width2).attr("height", height2).append("g");
     var svg3 = d3.select("#canvas3").append("svg")
      .attr("width", width3+(2*margin)).attr("height", height3+(2*margin)).append("g").attr("transform", "translate(" + margin + "," + margin + ")");;

    // var dataurl = "https://gist.githubusercontent.com/rahoofhw/23f90643b01aaa07a17e779910cdc405/raw/meteorite-landings.csv";
    var dataurl= "https://gist.githubusercontent.com/rahoofhw/5d91f9f25c9d58db750dfdfe63a5f71c/raw/meteors.csv";
    d3.csv(dataurl).then(function(data){
        csvData = data;
        currentData = csvData;
        //console.log(data.length,data[0]);
        drawMap();
        drawMeteorsPerType(csvData);
        drawMeteorsPercountry(csvData);
    });
    
    function drawMeteorsPerType(Data){
        let key = 'recclass'; var filteredData={} ; var chartdata =[];
        Data.forEach(a=>{
            if(!filteredData.hasOwnProperty([a[key]])){
             filteredData[a[key]] =0;   
            }
            filteredData[a[key]]= filteredData[a[key]]+1;
        })
        delete filteredData[""];
        Object.keys(filteredData).forEach(a=>{
            chartdata.push({'recclass':a,'value':filteredData[a]});
        })
        drawPieChart(getTop8(chartdata,"recclass",10));
    }
    
    function drawMeteorsPercountry(Data){
        let key = 'cname'; var filteredData={}; var bardata =[];
        Data.forEach(a=>{
            if(!filteredData.hasOwnProperty([a[key]])){
             filteredData[a[key]] =0;   
            }
            filteredData[a[key]]= filteredData[a[key]]+1;
        })
        Object.keys(filteredData).forEach(a=>{
            bardata.push({'cname':a,'value':filteredData[a]});
        })
        //console.log("bardata ::",filteredData , bardata);
        drawBarChart(getTop8(bardata,"cname",10,false))
    }

    function drawPieChart(data) {
    //   d = Object.values(data);
        var pie = d3.pie().value(function(d) { return d.value; });
        var color = d3.scaleOrdinal().domain(data.map(function (el) { return el.recclass; })).range(d3.schemeSet3);
                
        var arc = d3.arc().innerRadius(0).outerRadius(radius);
        var data_ready = pie(data)
        var u = svg.selectAll("path").data(data_ready);
        var arcs = u.enter().append('path');
        //console.log("\n\n data_ready :: ",data_ready)
                      
        arcs.merge(u).transition().duration(3000).attr('d', arc).attr("class", "arc")
        .attr('fill', function (d){return color(d.data.recclass) });
        
        arcs.on("mouseover",handlemouseover);
        arcs.on("mousemove", handlemousemove);
        arcs.on("mouseout", handlemouseout);
        arcs.on("click",function(d,i){
            //console.log(d,i);
            if(i.data.recclass != "Others"){
                filters['recclass'] =i.data.recclass;
             filterDataAndProcess();   
            }
        })
        // remove the group that is not present anymore
        u.exit().remove()
    }
    function handlemouseover (d, i) { 
        d3.select(this).attr('d',function(d){return d3.arc().innerRadius(0).outerRadius(radius+10)(d)});
    }
    function handlemousemove(d,i){
        d3.selectAll(".text").remove();
        svg.append("text").attr("x", d3.pointer(event)[0] ).attr("y", d3.pointer(event)[1]-5 ).text("Type: '"+i.data.recclass+ "'\nCount : "+i.value).attr("class","text");
    }
    function handlemouseout(){
        d3.select(this).attr('d',function(d){return d3.arc().innerRadius(0).outerRadius(radius)(d)});
        d3.selectAll(".text").remove();
    }
    
    function drawBarChart( data){
   
  // sort data
  data.sort(function(b, a) {
    return a.Value - b.Value;
  });

  // X axis
  var x = d3.scaleBand()
    .range([ 0, width3 ])
    .domain(data.map(function(d) { return d.cname; }))
    .padding(0.2);
  svg3.append("g")
    .attr("transform", "translate(0," + height3 + ")")
    .call(d3.axisBottom(x))
    .selectAll("text")
      .attr("transform", "translate(-10,0)rotate(-45)")
      .style("text-anchor", "end");
    var values = data.map(function(d) { return d.value; });
    //console.log(d3.min(values),d3.max(values))
  // Add Y axis
  var y = d3.scaleLinear().domain([d3.min(values),d3.max(values)]).range([ height3, 0]);
  svg3.append("g")
    .call(d3.axisLeft(y));

  // Bars
  var u = svg3.selectAll("rect")
    .data(data)

  u.enter().append("rect").merge(u)
    .transition()
    .duration(1000)
      .attr("x", function(d) { return x(d.cname); })
      .attr("y", function(d) { return y(d.value); })
      .attr("width", x.bandwidth())
      .attr("height", function(d) { return height3 - y(d.value); })
      .attr("fill", "#69b3a2")
    } 
    

    function drawMap() {
      var path = d3.geoPath().projection(projection);
    //   var g = svg2.append("g");
    
      // load and display the World
      d3.json("https://raw.githubusercontent.com/deldersveld/topojson/master/world-countries.json").then(function (topology) {
        //console.log("topology ", topology);
        var topologypath = svg2.selectAll("path")
          .data(topojson.feature(topology, topology.objects.countries1).features)
          .enter().append("path")
          .attr("d", path).attr("class", 'path')
          .on("click", function (d, i) {
            //console.log( i);
            d3.selectAll(".mapclick").attr("class", "path");
            if(i.properties && i.properties.name){
                filters['cname'] =i.properties.name;
                filterDataAndProcess();
            }
            d3.select(this).attr("class", "path hover mapclick");
          });
          svg2.append('path').attr('d',path({'type':'sphere'})).attr("class","sphere");
        //   plotMeteors();
      });
    }
    function toggleMeteorFlag(){
        meteorsflag = !(meteorsflag);
        plotMeteors();
    }
    function plotMeteors(){
        d3.selectAll(".marker").remove();
        if(meteorsflag){
            let generator = d3.geoPath().projection(projection);
            currentData.forEach(point =>{
                //console.log(point)
                var circle = d3.geoCircle().center([point.reclong,point.reclat]).radius(2);
                var tip = d3.tip().attr('class', 'd3-tip')
                  .offset([-20, 0]) .html(function(d) {
                    //console.log(d);
                    return "<span  style='color:blue'>"+JSON.stringify(point)  + "</span>";
                  })
                svg2.append('path').attr('d', generator(circle())).attr('stroke', '#000').attr("class","marker").attr('fill', '#ff0').on("mouseover",tip.show).on("mouseout", tip.hide).call(tip);
        
            })    
        }
        
        
    }
    
    function filterDataAndProcess(){
        currentData =  csvData.filter(item =>{
            for (var key in filters) {
                if (item[key] === undefined || item[key] != filters[key])
                return false;
            }
            return true;  
        });
        //console.log("currentData :::",currentData.length);
        drawMeteorsPerType(currentData);
        drawMeteorsPercountry(currentData);
        plotMeteors();
    }
    
    function getTop8(data,key,size,getOthers =true ){
        var sortedData =data.sort(function(a, b){return b.value-a.value});
        if(sortedData.length <=size){
            return sortedData;
        }
        var filteredData =[];
        for(var i=0 ; i<sortedData.length;i++){
            if(i<size){
                filteredData.push(sortedData[i]);
            }else{
                if(getOthers){
                 if(!(filteredData.length ==size+1)){
                    filteredData[size]={[key]:"Others","value":0};
                    }
                    filteredData[size]["value"]+= sortedData[i]["value"];   
                }
            }
        }
        return filteredData;
    }
    
    function clearFilter(filter){
        if(filters.hasOwnProperty(filter)){
            if(filter =='cname'){
                d3.selectAll(".mapclick").attr("class", "path");
            }
            delete filters[filter];
            filterDataAndProcess();
        }
    }

  </script>
</body>

</html>
