
Exercise 23: Extend the concept of the ‘bar chart’, however, instead draw a ‘line graph’ with two data sets that‘transition’ between them when you select a button (as you did for the bar graph example above).


<!DOCTYPE html>
<html>
  <meta charset="utf-8" />
    <style>
        .pulse { border: 1px solid blue;fill: lightblue;stroke: purple;
            transform: scale(1);transform-origin: 50% 50%;}
        .pulse:hover {
            animation-name: pulsar;animation-duration: 0.2s;animation-iteration-count: infinite;
            animation-direction: alternate;-webkit-transform-origin: 50% 50%;transform-origin: 50% 50%; }
        @keyframes pulsar {
            from { fill: red;}
            to {fill: red;transform: scale(1.3,1.3);transform-origin: 50% 50%;
        }
    </style>
  <body>
      <button onclick="draw(svg,plotdata,'blue')">Variable 1</button>
        <button onclick="draw(svg,plotdata2,'red')">Variable 2</button>
        <script src='https://d3js.org/d3.v7.min.js'></script>
        <script>
            const xSize = 600; const ySize = 600; const margin = 40;
            const xMax = xSize - margin*2;const yMax = ySize - margin*2;
            // Create Random Points
            const numPoints = 100;
            const svg = d3.select("body").append("svg").attr('width', xSize ).attr('height', ySize ).append("g")
            .attr("transform","translate(" + margin + "," + margin + ")");
            const plotdata = [];        const plotdata2 = [];
            for (let i = 0; i < 100; i++) { plotdata.push( {x: i/100, y: Math.sin( 6.2 * i/100 ) } ); }
            for (let i = 0; i < 100; i++) { plotdata2.push( {x: i/100, y: Math.cos( 6.2 * i/100 ) } ); }
            draw(svg,plotdata,"blue");
            function draw(svg,data,color){
                svg.selectAll('g').remove(); svg.selectAll('path').remove(); svg.selectAll('circle').remove();
                // Get the 'limits' of the data - the full extent (mins and max)
                // so the plotted data fits perfectly
                const xExtent = d3.extent( data, d=>{ return d.x } );
                const yExtent = d3.extent( data, d=>{ return d.y } );
                // X Axis
                const x = d3.scaleLinear().domain([ xExtent[0], xExtent[1] ]).range([0, xMax]);
                svg.append("g").attr("transform", "translate(0," + yMax + ")").call(d3.axisBottom(x)); 
                svg.append("g").call(d3.axisTop(x));
                // Y Axis
                const y = d3.scaleLinear().domain([ yExtent[0], yExtent[1] ]).range([ yMax, 0]);
                svg.append("g").call(d3.axisLeft(y));
                svg.append("g").attr("transform", `translate(${yMax},0)`).call(d3.axisRight(y));
                // Add the line
                svg.append("path").datum(data).attr("fill", "none").attr("stroke", color).attr("stroke-width", 1.5).attr("d", d3.line().x(function(d) { return x(d.x) }).y(function(d) { return y(d.y) })      );   
                svg.selectAll("dot").data(data).enter().append("circle").attr("cx", function (d) { return x(d.x) } )
                .attr("cy", function (d) { return y(d.y) } ).attr("r", 4).attr("class","pulse");
            }
        </script>
  </body>
</html>




